name: Build & Publish multi-arch image

on:
  # push:
  #   branches: [ main ]          # build every commit on main
  #   tags:     [ 'v*.*.*' ]      # and every semver tag like v1.2.3
  workflow_dispatch:            # allow manual trigger

env:
  IMAGE_NAME: whisper_ws        # change if you want a different repo name
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      packages: write           # allow pushing to ghcr with GITHUB_TOKEN
      contents: read

    steps:
    # 1 – Checkout
    - uses: actions/checkout@v4

    # 2 – Set up QEMU for cross-arch emulation
    - uses: docker/setup-qemu-action@v3          # QEMU makes arm64 builds possible on x86 runners :contentReference[oaicite:0]{index=0}

    # 3 – Set up Buildx builder
    - uses: docker/setup-buildx-action@v3        # Buildx enables multi-arch and cache features :contentReference[oaicite:1]{index=1}

    # 4 – Login to GitHub Container Registry
    - uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}     # built-in token is sufficient :contentReference[oaicite:2]{index=2}

    # 5 – Login to Docker Hub
    - uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USER }}
        password: ${{ env.DOCKERHUB_TOKEN }}      # create a PAT with “write packages” scope :contentReference[oaicite:3]{index=3}

    # 6 – Extract metadata (labels & tags)
    - id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          ${{ env.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}

    # 7 – Build and push for amd64 + arm64
    - uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64        # multi-arch build :contentReference[oaicite:4]{index=4}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        provenance: false                         # smaller manifest, optional
        build-args: |
          USER_ID=${{ env.DOCKERHUB_USER }}
